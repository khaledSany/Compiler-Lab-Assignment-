//inFix to postfix

//This Code will be Show the postfix form of auser given expression




#include<stdio.h>
#include<stdlib.h>
#include<ctype.h>
#include<string.h>

char stack[20];
int top = -1;
void push(char x)

main()
{
    char exp[20];
    char *e;
    char x;
    printf("Enter your expression :: ");
    scanf("%s",exp);
    e = exp;
    while(*e != '\0')
    {
        if(isalnum(*e))
            printf("%c",*e);
        else if(*e == '(')
            push(*e);
        else if(*e == ')')
        {
            while((x = pop()) != '(')
                printf("%c", x);
        }
        else
        {
            while(priority(stack[top]) >= priority(*e))
                printf("%c",pop());
            push(*e);
        }
        e++;   
    }
    
    while(top != -1)
    {
        printf("%c",pop());
    }
}


{
    stack[++top] = x;
}

char pop()
{
    if(top == -1)
        return -1;
    else
        return stack[top--];
}

int priority(char x)
{
    if(x == '(')
        return 0;
    if(x == '+' || x == '-')
        return 1;
    if(x == '*' || x == '/')
        return 2;
}

// The Final Form Of Assignment 2



import java.util.Stack;
import java.util.Scanner; 
  
public class MainClass 
{ 
   
   public static int Prec(char ch) 
    { 
        switch (ch) 
        { 
        case '+': 
        case '-': 
            return 1; 
       
        case '*': 
        case '/': 
            return 2; 
       
        case '^': 
            return 3; 
        } 
        return -1; 
    } 
       
      
    static String infixToPostfix(String exp) 
    { 
       
        String result = new String(""); 
          
        
        Stack<Character> stack = new Stack<>(); 
          
        for (int i = 0; i<exp.length(); ++i) 
        { 
            char c = exp.charAt(i); 
              
           
            if (Character.isLetterOrDigit(c)) 
                result += c; 
               
            
            else if (c == '(') 
                stack.push(c); 
              
             
            else if (c == ')') 
            { 
                while (!stack.isEmpty() && stack.peek() != '(') 
                    result += stack.pop(); 
                  
                if (!stack.isEmpty() && stack.peek() != '(') 
                    return "Invalid Expression"; // invalid expression                 
                else
                    stack.pop(); 
            } 
            else  
            { 
                while (!stack.isEmpty() && Prec(c) <= Prec(stack.peek())) 
                    result += stack.pop(); 
                stack.push(c); 
            } 
       
        } 
       
        
        while (!stack.isEmpty()) 
            result += stack.pop(); 
       
        return result; 
    } 
    
    public static void main(String[] args)  
    { 
        String exp = "a+b*(c^d-e)^(f+g*h)-i"; 
        System.out.println(infixToPostfix(exp)); 
    } 


    //Calculation part

      public static double Calculate(double num1, char operator, double num2)
	{
		double ans = 0;
		
		switch (operator)
		{
		case '+':
			ans = num1+num2;
			break;
		case '-':
			ans = num1-num2;
			break;
		case '*':
			ans = num1*num2;
			break;
		case '/':
			ans = num1/num2;
			break;
		default:
			break;
		}
		
		return ans;
	}
	
	public static double gettingValue(char variable)
	{
		double value = 0;
		for (int i = 0; i < variables.length(); i++)
		{
			if (variables.charAt(i) == variable)
			{
				return values[i];
			}
		}
		
		return value;

	}
	
	public static double CalculateSorolOnko(String sorolOnko)
	{
		String postfixSorolOnko = infixToPostfix(sorolOnko);
		double ans = 0;
		double[] stack = new double[100];
		int top = -1;
		
		//Main Calculation Code
		
		for (int i = 0; i < postfixSorolOnko.length(); i++)
		{
			if(postfixSorolOnko.charAt(i) >= 'A' && postfixSorolOnko.charAt(i) <= 'Z' || postfixSorolOnko.charAt(i) >= 'a' && postfixSorolOnko.charAt(i) <= 'z')
			{
				stack[++top] = gettingValue(postfixSorolOnko.charAt(i));
			}
			else if(postfixSorolOnko.charAt(i) == ' ')
				continue;
			else
			{
				stack[top-1] = Calculate(stack[top-1], postfixSorolOnko.charAt(i), stack[top]);
				top--;
			}
		}
		
		if (top == 0)
		{
			ans = stack[top];
		}
		
		
		return ans;
	}

	public static void main(String[] args)
	{
		System.out.print("Number Of Variables:  ");
		int NumberOfVariables = scanner.nextInt();
		
		int i;
		
		
		System.out.println("Enter Variable Names(One Letter):");
		for (i = 0; i <= NumberOfVariables; i++)
		{
			variables = variables + scanner.nextLine();
		}
		
		System.out.println("Enter Values:");
		for (i = 0; i < NumberOfVariables; i++)
		{
			System.out.print(variables.charAt(i)+" = ");
			values[i] = scanner.nextDouble();
		}
		
		
		System.out.print("Number Of Equations:  ");
		int NumberOfEquation = scanner.nextInt();
		
		
		System.out.println("Enter Equations:");
		for (i = 0; i <= NumberOfEquation; i++)
		{
			if(i!=0)
				System.out.print((i)+". ");
			equations[i] = scanner.nextLine();
		}
		
		
		
		for (i = 1; i <= NumberOfEquation; i++) {
			answer[i] = CalculateSorolOnko(equations[i]);
		}
		
		System.out.println("\n\n\n");
		for (i = 1; i <= NumberOfEquation; i++) {
			System.out.println("Answer Of Equation "+(i)+" = "+answer[i]);
		}
	}


} 
